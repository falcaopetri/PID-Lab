#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('pidPlotter:server');
var http = require('http');

var config = require('_/config').server;

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require("socket.io")(server);

io.on("connection", function(socket) {
    // we've got a client connection
    console.log("new client connetion");

    socket.on('request_connections_available', function () {
        // TODO change callback
        var update_connections_available = function (data) {
            console.log("should emit update_connections_available");
            socket.emit.bind(socket)("update_connections_available", data);
        }
        app.pidController.auto_detect(update_connections_available);
    });

    socket.on("disconnect", function() {
        // TODO disconnect the associated pid controller
        console.log("client disconnected");
    });

    socket.on("request_connection", function(data, fn) {
        console.log("received request to connect to: ", data.connName);
        app.pidController.connect(data.connName,
            function (message) {
                // TODO
                // socket.to(data.connName).emit("new_controller_data", {message});
                socket.emit("new_controller_data", { message });
            },
            function (err) {
                fn(!err);
            }
        );
    });
});

io.sockets.on('connection', function(socket){
    // Source: http://stackoverflow.com/a/16475058
    socket.on('subscribe', function(room) {
        console.log('joining room', room);
        socket.join(room);
    });

    socket.on('unsubscribe', function(room) {
        console.log('leaving room', room);
        socket.leave(room);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
