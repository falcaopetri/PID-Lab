#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pidPlotter:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require("socket.io")(server);

function partial(func /*, 0..n args */) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var allArguments = args.concat(Array.prototype.slice.call(arguments));
    return func.apply(this, allArguments);
  };
}

var handleClient = function(socket) {
    // we've got a client connection
    console.log("handle");

    // var interval = setInterval(function() {
    //     socket.emit("detect", pidController.auto_detect());
    // }, 1000);

    socket.on('request_connections_available', function () {
        console.log("request_connections_available received");
        // app.pidController.auto_detect(partial(socket.emit, "update_connections_available"));
        // TODO change callback
        app.pidController.auto_detect(socket.emit.bind(socket));
        // socket.emit("update_connections_available", {'data':'data'});
    });

    socket.on("disconnect", function() {

    });

    socket.on("request_connection", function(data) {
        console.log("received request to connect to: ", data.connName);
        app.pidController.connect(data.connName,
            function () {
                //success
            },
            function () {
                //error
            }
        );
    });
};
io.on("connection", handleClient);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
